#include "Animation.h"
#include <iostream>
#include <memory>
#include <string>
#include <vector>

#include "Enemy.h"
#include "Menu.h"
#include "Scene.h"
#include "level1.h"
#include "Player.h"

int frame = 0;
bool onFirstWinLastFrame = false;
bool continueToMenu = false;
bool lv1Active = false;
bool lvl2Active = false;
bool menuMusicPlaying = false;
int narrativeIndex = 0;
std::vector<std::unique_ptr<Animation>> animations;  // Animation vector
std::unique_ptr<Menu> menu;
std::vector<int> levelImages;
std::vector<int> level1EndImages;
Animation* victoryLvl1;
size_t currentAnimationIndex = 0;  // Track the current animation index
int animationTimerID = -1;  // Global variable to store timer ID
Scene* scene1; // stating level 1
Level1* level1;
Level1End* level1End;
std::unique_ptr<Level2> lvl2;
std::unique_ptr<Player> player;
std::unique_ptr<Enemy> guilt;
void startAnimationTimer();
Enemy* fear;
bool lvl1End = false;
bool fearKilled = false;
bool lvl1Won;
bool playedVictory = false;
bool resetVicAnim = false;
bool playLevel1EndAnimation = false;
bool level2AnimationFinished = false;
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::Idraw Here::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://
void returnToChapterSelect() {
	// Reset variables to their initial states
	lv1Active = false;
	lvl1End = false;
	lvl1Won = false;
	fearKilled = false;
	lvl1Won = false;
	playLevel1EndAnimation = false;
	level2AnimationFinished = false;

	// Reset menu state
	menu->play_clicked = true;
	menu->chapterChoice = 0;
	menu->choice = 0;

	// Reset level states
	scene1->setContinueStatus(false);
	level1->initLevel = false;
	level1->hasPassed = false;

	// Reset player and enemy
	player->reset();  // Add reset function to Player class
	fear->reset();
}
void iDraw()
{
	iClear();

	if (!animations.empty()) {
		animations[currentAnimationIndex]->render(0, 0, 800, 600);

		if (animations[currentAnimationIndex]->hasFinished()) {
			if (!animations[currentAnimationIndex]->isLastFrameRendered()) {
				return;  // Don't advance yet
			}
			if (currentAnimationIndex + 1 < animations.size()) {
				currentAnimationIndex++;
				animations[currentAnimationIndex]->reset();
				startAnimationTimer();
			}
			else {
				onFirstWinLastFrame = true;
			}
		}
	}

	if (onFirstWinLastFrame && continueToMenu) {
		if (!menuMusicPlaying) {  // Play only if not already playing
			PlaySound(NULL, NULL, 0);  // Stop previous music
			PlaySound("Audio/menuMusic.wav", NULL, SND_FILENAME | SND_ASYNC | SND_LOOP);
			menuMusicPlaying = true;
		}
		menu->render();
	}
	if (lv1Active && !scene1->getContinueStatus()) {
		scene1->render(narrativeIndex);
	}
	else if (lv1Active && scene1->getContinueStatus()) {
		if (!lvl1Won)
		{
			level1->render();
			if (level1->hasPassed && level1->initLevel)
			{
				if (!lvl1End)
				{
					player->render();
					fear->render();
				}
				else if (lvl1End)
				{
					iShowImage(0, 0, 800, 600, level1->wonLevel);
				}
			}
		}
		if (lvl1Won)
		{
			if (!playLevel1EndAnimation)
			{
				level1End->render();  // Normal level 1End rendering
			}

			if (!animations.empty() && playLevel1EndAnimation)
			{
				animations[currentAnimationIndex]->render(0, 0, 800, 600);

				if (animations[currentAnimationIndex]->hasFinished())
				{
					if (!animations[currentAnimationIndex]->isLastFrameRendered())
						return;  // Wait for the final frame

					if (currentAnimationIndex + 1 < animations.size())
					{
						currentAnimationIndex++;
						animations[currentAnimationIndex]->reset();
						startAnimationTimer();
					}
					else
					{
						playLevel1EndAnimation = false; // Stop after animation finishes
					}
				}
			}
		}
	}
	if (lvl2Active)
	{
		lvl2->render();
		if (lvl2->initLevel)
		{
			player->render();
		}
	}
}

void updateFrame() {
	if (!animations.empty()) {
		animations[currentAnimationIndex]->updateFrame();
	}
}


/*function iMouseMove() is called when the user presses and drags the mouse.
(mx, my) is the position where the mouse pointer is.
*/
void iMouseMove(int mx, int my)
{
	std::cout << mx << ", " << my << std::endl;
}

//*******************************************************************ipassiveMouse***********************************************************************//
void iPassiveMouseMove(int mx, int my)
{
	menu->update(mx, my);
}

void iMouse(int button, int state, int mx, int my)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		if (menu->getChoice() == 1)
		{
			menu->play_clicked = true;
			std::cout << "Play click status : " << menu->play_clicked << "\n";
		}
		else if (menu->getChoice() == 4) exit(0);
		else if (menu->play_clicked)
		{
			if (menu->getLevelChoice() == 1)
			{
				lv1Active = true;
			}
			else if (menu->getLevelChoice() == 2)
			{
				lvl2Active = true;
				player->loadNewAttackSprites();
			}
			else if (menu->getLevelChoice() == 4)
			{
				menu->play_clicked = false;
			}
		}
		if (lvl2 && lvl2->levelImageIndex == 1)
		{
			lvl2->puzzleLogic(mx, my);
		}
	}

	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN) {}
}
/*
function iKeyboard() is called whenever the user hits a key in keyboard.
key- holds the ASCII value of the key pressed.
*/
bool enterPressed = false;
void iKeyboard(unsigned char key)
{
	if (lv1Active && scene1->getContinueStatus())
	{
		if (key >= '0' && key <= '9')  // Only accept numeric keys
		{
			level1->takeKeyInput(key);
		}
		else if (key == 8)
		{
			if (!level1->ans.empty())
				level1->ans.pop_back();
		}
	}
	if (!enterPressed)
	{
		if (key == '\r')
		{
			if (lv1Active && !scene1->getContinueStatus())
			{
				scene1->setContinueStatus(true);
			}
			if (level1->hasPassed && !level1->initLevel)
			{
				PlaySound(NULL, NULL, 0);
				level1->initLevel = true;
			}
			if (fear->isDead && lvl1End && !lvl1Won)
			{
				lvl1Won = true;
			}
			if (lvl1Won && !playLevel1EndAnimation && animations.size() < 3) // Prevent duplicates
			{
				animations.emplace_back(std::make_unique<Animation>(
					"Images/lvl2", "memory", 80, false, 70, "Audio/firstWindowMusic.wav", false));

				playLevel1EndAnimation = true;
				startAnimationTimer();
			}
			enterPressed = true;
			if (lvl2Active)
			{
				lvl2->advanceImage();
				if (lvl2->puzzleCompleted && !lvl2->initLevel)
				{
					lvl2->initLevel = true;
				}
			}
		}
	}
	if (key == ' ')
	{
		level1End->advanceImage();
	}
	if (key == 27)
	{
		if (level1End->levelImageIndex >= level1End->levelImages.size() - 1)
		{
			returnToChapterSelect();
		}
	}
}

bool guiltSpawned = false;
/*
function iSpecialKeyboard() is called whenver user hits special keys like-
function keys, home, end, pg up, pg down, arraows etc.
*/
void iSpecialKeyboard(unsigned char key)
{
	if (key)
	{
		if (fear->isDead && !lvl1End)
		{
			lvl1End = true;
		}
	}
	if (key == GLUT_KEY_HOME)
	{
		if (onFirstWinLastFrame && !continueToMenu)
		{
			continueToMenu = true;
		}
	}
	if (level1->hasPassed && level1->initLevel)
	{
		if (key == GLUT_KEY_RIGHT) player->moveRight();
		if (key == GLUT_KEY_LEFT) player->moveLeft();
		if (key == GLUT_KEY_END)
		{
			player->attack(*fear);
			if (guilt && guiltSpawned)
			{
				player->attack(*guilt);
			}
		}
	}
}
void keyUp(int key, int x, int y)
{
	if (key == GLUT_KEY_RIGHT || key == GLUT_KEY_LEFT)
	{
		player->stopMoving();
	}
}

void nkeyUp(unsigned char key, int x , int y)
{
	if (key == '\r')
	{
		enterPressed = false;
	}
}

std::vector<int> loadLevel1Narrative()
{
	std::vector<int> sprites;
	sprites.emplace_back(iLoadImage("Images/narrative/narrative1.png"));
	return sprites;
}
void startAnimationTimer() {
	if (animationTimerID != -1) {
		iPauseTimer(animationTimerID);  // Stop the previous timer
	}
	animationTimerID = iSetTimer(animations[currentAnimationIndex]->getInterval(), updateFrame);
}
bool axeDamageSet = false;

std::vector<int> loadGuiltWalkSprites(int walkSize)
{
	std::vector<int> v;
	v.reserve(walkSize);
	for (int i = 0; i < walkSize; i++)
	{
		std::string path = "Images/guilt/walk/walk (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
std::vector<int> loadGuiltIdleSprites(int idleSize)
{
	std::vector<int> v;
	v.reserve(idleSize);
	for (int i = 0; i < idleSize; i++)
	{
		std::string path = "Images/guilt/idle/idle (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
std::vector<int> loadGuiltAttackSprites(int attackSize)
{
	std::vector<int> v;
	v.reserve(attackSize);
	for (int i = 0; i < attackSize; i++)
	{
		std::string path = "Images/guilt/attack/attack (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
std::vector<int> loadGuiltDeathSprites(int deathSize)
{
	std::vector<int> v;
	v.reserve(deathSize);
	for (int i = 0; i < deathSize; i++)
	{
		std::string path = "Images/guilt/death/death (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
void update()
{
	level1->update(*player);
	if (level1->initLevel && !lvl2Active)
	{
		player->update(10);
	}
	if (lvl1Won)
	{
		level1End->update(*player);
	}
	if (lvl2Active)
	{
		lvl2->update(*player);
		if (lvl2->initLevel)
		{
			player->update(15);
			if (!axeDamageSet) {
				player->damage = 20;
				axeDamageSet = true;
			}
			if (!guiltSpawned)
			{
				guilt = std::make_unique<Enemy>(Pos(600, 1), Dim(128, 128), 15, 150, loadGuiltWalkSprites(7), 
					loadGuiltIdleSprites(7), loadGuiltAttackSprites(7), loadGuiltDeathSprites(3), 7, 7, 7, 3);
				guiltSpawned = true;
			}
		}
	}
}
void updateEnemy()
{
	if (level1->initLevel)
	{
		if (!lvl1End){
			fear->update(5.f);
			fear->updateAI(*player);
		}
	}
	if (lvl2->initLevel)
	{
		if (guiltSpawned)
		{
			guilt->update(5.f);
			guilt->updateAI(*player);
		}
	}
}

std::vector<int> loadFearWalkSprites(int walkSize)
{
	std::vector<int> v;
	v.reserve(walkSize);
	for (int i = 0; i < walkSize; i++)
	{
		std::string path = "Images/fear/walk/walk (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
std::vector<int> loadFearIdleSprites(int idleSize)
{
	std::vector<int> v;
	v.reserve(idleSize);
	for (int i = 0; i < idleSize; i++)
	{
		std::string path = "Images/fear/idle/idle (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
std::vector<int> loadFearAttackSprites(int attackSize)
{
	std::vector<int> v;
	v.reserve(attackSize);
	for (int i = 0; i < attackSize; i++)
	{
		std::string path = "Images/fear/attack/attack (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
std::vector<int> loadFearDeathSprites(int deathSize)
{
	std::vector<int> v;
	v.reserve(deathSize);
	for (int i = 0; i < deathSize; i++)
	{
		std::string path = "Images/fear/death/death (" + std::to_string(i + 1) + ").png";
		v.emplace_back(iLoadImage(const_cast<char*>(path.c_str())));
	}
	return v;
}
int main() {
	iInitialize(800, 600, "Veil of Regret");  // Initialize first!
	player = std::make_unique<Player>(Pos(200, 42 - 16), Dim(128, 128), 20, 120, 6, 12, 7);
	fear = new Enemy(Pos(600, 1), Dim(128, 128), 10, 150, loadFearWalkSprites(16),
		loadFearIdleSprites(16), loadFearAttackSprites(16), loadFearDeathSprites(8),
		16, 16, 16, 8);
	animations.emplace_back(std::make_unique<Animation>("Images/clockTicking", "clock", 165, false, 44,
		"Audio/introSound.wav"));
	animations.emplace_back(std::make_unique<Animation>("Images/firstWindow", "window", 25, false, 260,
		"Audio/firstWindowMusic.wav", true));
	scene1 = new Scene(loadLevel1Narrative());
	levelImages.emplace_back(iLoadImage("images/level1/puzzle.png"));
	levelImages.emplace_back(iLoadImage("images/level1/success.png"));
	level1 = new Level1(levelImages);
	level1EndImages.emplace_back(iLoadImage("images/lvl2/begin0.png"));
	level1EndImages.emplace_back(iLoadImage("images/lvl2/begin.png"));
	level1End = new Level1End(level1EndImages);
	std::vector<int> level2Images;
	level2Images.emplace_back(iLoadImage("Images/lvl2/narrative1.png"));
	level2Images.emplace_back(iLoadImage("Images/lvl2/puzzle.png"));
	lvl2 = std::make_unique<Level2>(level2Images);
	if (animations.empty()) {
		std::cerr << "Error: Failed to initialize animations" << std::endl;
		return -1;
	}
	glutKeyboardUpFunc(nkeyUp);
	glutSpecialUpFunc(keyUp);
	startAnimationTimer();
	iSetTimer(60, update);
	iSetTimer(100, updateEnemy);
	menu = std::make_unique<Menu>();
	iStart();
	delete scene1;
	delete level1;
	delete level1End;
	delete victoryLvl1;
	if (fear) delete fear;
	return 0;
}
